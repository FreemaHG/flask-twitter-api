user  www-data;
worker_processes  auto;  # Используем все доступные ядра для лучшей производительности

# notice - уровень логирования между дефолтным error (не очень подробным) и info (куда более подробным)
error_log  /var/log/nginx/error.log notice;
# pid процесса (для быстрой возможности прервать нужный процесс)
pid        /var/run/nginx.pid;

# Максимальное кол-во одновременных соединений для воркера
events {
    worker_connections  1024;
}

# Общие настройки http-сервера
http {
    # Логирование
    include       /etc/nginx/mime.types;
    default_type  application/octet-stream;

    log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                      '$status $body_bytes_sent "$http_referer" '
                      '"$http_user_agent" "$http_x_forwarded_for"';

    access_log  /var/log/nginx/access.log  main;

    sendfile        on;  # Оптимизация для более быстрой отдачи статики
    keepalive_timeout  65;  # Время открытого tcp-соединение (для быстрого повторного запроса клиента)

    upstream app_server {
        server api:5555 fail_timeout=0;
    }

    server {

        listen 80 deferred;  # Слушать 80 порт
        client_max_body_size 4G;

        server_name localhost;  # Домен

        keepalive_timeout 5;

        # Местоположение статических файлов (Dockerfile)
        root /usr/share/nginx/html/static;

        location /api/ {
            try_files $uri @proxy_to_app;
        }

        location @proxy_to_app {
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header Host $http_host;
            # we don't want nginx trying to do something clever with
            # redirects, we set the Host: header above already.
            proxy_redirect off;
            proxy_pass http://app_server;
        }
    }

}